---
- name: Install prerequisite packages
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - ca-certificates
      - curl
      - gnupg-agent

- name: Create CA certificate directory
  file:
    path: /usr/local/share/ca-certificates/easyrsa
    state: directory
    mode: 0755

- name: Copy CA certificate
  copy:
    src: roles/k8s/files/ca.crt
    dest: /usr/local/share/ca-certificates/easyrsa/ca.crt

- name: Add CA certificate to system store
  lineinfile:
    path: /etc/ca-certificates.conf
    regexp: '^easyrsa/ca\.crt$'
    line: 'easyrsa/ca.crt'
    state: present
  notify:
    - update ca certs

- name: Flush handlers
  meta: flush_handlers

- name: Add apt signing key for Docker
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker apt repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
    state: present
    filename: docker

# Install the container runtime, containerd in this case.
- name: Install containerd.io
  apt:
    name: containerd.io
    state: present
    update_cache: yes

# The runtime requires some additional configuration.
# Consult its and the Kubernetes documentation for details.
- name: Create containerd configuration directory
  file:
    path: /etc/containerd
    state: directory

- name: Configure containerd.io
  shell: containerd config default > /etc/containerd/config.toml

- name: Enable systemd cgroup driver in containerd
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^\s{12}SystemdCgroup = true$'
    insertafter: '\s{10}\[plugins\."io\.containerd\.grpc\.v1\.cri"\.containerd\.runtimes\.runc\.options\]$'
    line: '            SystemdCgroup = true'

- name: Restart containerd
  service:
    name: containerd
    daemon_reload: yes
    state: restarted

# Configure the CLI tool to inspect the node-local container runtime.
- name: Configure crictl
  copy:
    dest: /etc/crictl.yaml
    content: |
      runtime-endpoint: unix:///run/containerd/containerd.sock
      image-endpoint: unix:///run/containerd/containerd.sock
      timeout: 2

- name: Configure kernel modules
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter

- name: Load kernel modules
  command: "modprobe {{ item }}"
  with_items:
    - overlay
    - br_netfilter

- name: Configure sysctl parameters
  copy:
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1

- name: Reload sysctl parameters
  command: sysctl --system

# Kubernetes complains if swap is enabled on the system.
- name: Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Add apt signing key for Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes apt repository
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes

- name: Install Kubernetes packages
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - "kubelet={{ k8s_version }}"
      - "kubeadm={{ k8s_version }}"
      - "kubectl={{ k8s_version }}"

- name: Pin the Kubernetes version
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubelet
    - kubeadm
    - kubectl

- name: Configure node ip
  lineinfile:
    path: /etc/default/kubelet
    line: KUBELET_EXTRA_ARGS=--node-ip={{ ansible_host }}
    create: yes

- name: Restart kubelet
  service:
    name: kubelet
    daemon_reload: yes
    state: restarted
